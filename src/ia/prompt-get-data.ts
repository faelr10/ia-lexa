// Retorna a data de hoje no formato ISO
export function getTodayISO(): string {
  return new Date().toISOString().split('T')[0];
}

// Retorna a data de hoje + offset em dias
export function getDateOffset(days: number): string {
  const date = new Date();
  date.setDate(date.getDate() + days);
  return date.toISOString().split('T')[0];
}

// Retorna o domingo desta semana (in√≠cio da semana)
export function getThisSundayISO(): string {
  const today = new Date();
  const dayOfWeek = today.getDay(); // domingo=0
  const diff = dayOfWeek; // quantos dias voltar para domingo
  const sunday = new Date(today);
  sunday.setDate(today.getDate() - diff);
  return sunday.toISOString().split('T')[0];
}

// Retorna o s√°bado desta semana (fim da semana)
export function getThisSaturdayISO(): string {
  const sundayISO = getThisSundayISO();
  const sunday = new Date(sundayISO);
  const saturday = new Date(sunday);
  saturday.setDate(sunday.getDate() + 6);
  return saturday.toISOString().split('T')[0];
}

// Retorna o domingo da pr√≥xima semana (in√≠cio da pr√≥xima semana)
export function getNextSundayISO(): string {
  const sunday = new Date(getThisSundayISO());
  sunday.setDate(sunday.getDate() + 7);
  return sunday.toISOString().split('T')[0];
}

// Retorna o s√°bado da pr√≥xima semana (fim da pr√≥xima semana)
export function getNextSaturdayISO(): string {
  const sunday = new Date(getNextSundayISO());
  const saturday = new Date(sunday);
  saturday.setDate(sunday.getDate() + 6);
  return saturday.toISOString().split('T')[0];
}

// Retorna o primeiro dia do m√™s atual
export function getFirstDayOfMonthISO(): string {
  const today = new Date();
  const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
  return firstDay.toISOString().split('T')[0];
}

// Retorna o √∫ltimo dia do m√™s atual
export function getLastDayOfMonthISO(): string {
  const today = new Date();
  const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
  return lastDay.toISOString().split('T')[0];
}

// Retorna o primeiro dia do pr√≥ximo m√™s
export function getFirstDayOfNextMonthISO(): string {
  const today = new Date();
  const firstDayNextMonth = new Date(
    today.getFullYear(),
    today.getMonth() + 1,
    1,
  );
  return firstDayNextMonth.toISOString().split('T')[0];
}

// Retorna o √∫ltimo dia do pr√≥ximo m√™s
export function getLastDayOfNextMonthISO(): string {
  const today = new Date();
  const lastDayNextMonth = new Date(
    today.getFullYear(),
    today.getMonth() + 2,
    0,
  );
  return lastDayNextMonth.toISOString().split('T')[0];
}

// Retorna o ano atual
export function getCurrentYear(): number {
  return new Date().getFullYear();
}

// Retorna o ano seguinte
export function getNextYear(): number {
  return new Date().getFullYear() + 1;
}

// Retorna a pr√≥xima ocorr√™ncia de um dia da semana (0=domingo,...,6=s√°bado)
// Se for hoje, retorna hoje
export function getNextWeekdayISO(targetDay: number): string {
  const today = new Date();
  const dayOfWeek = today.getDay();
  const daysUntil = (targetDay - dayOfWeek + 7) % 7;
  const nextDate = new Date(today);
  nextDate.setDate(today.getDate() + daysUntil);
  return nextDate.toISOString().split('T')[0];
}

// Retorna a pr√≥xima ocorr√™ncia de s√°bado (pode ser hoje ou daqui alguns dias)
export function getNextSaturdayOccurrenceISO(): string {
  return getNextWeekdayISO(6); // s√°bado = 6
}

// Retorna "hoje"
export function getTodayFormatted(): string {
  return getTodayISO();
}

// Retorna "amanh√£"
export function getTomorrowISO(): string {
  return getDateOffset(1);
}

// Retorna a sexta-feira desta semana
export function getThisFridayISO(): string {
  return getNextWeekdayISO(5); // sexta-feira = 5
}

// Retorna o in√≠cio do fim de semana (pr√≥ximo s√°bado)
export function getThisWeekendStartISO(): string {
  return getNextSaturdayOccurrenceISO();
}

// Retorna o fim do fim de semana (pr√≥ximo domingo ap√≥s o s√°bado)
export function getThisWeekendEndISO(): string {
  const saturday = new Date(getThisWeekendStartISO());
  const sunday = new Date(saturday);
  sunday.setDate(saturday.getDate() + 1);
  return sunday.toISOString().split('T')[0];
}

// Retorna os pr√≥ximos X dias
export function getNextDaysISO(days: number): string {
  const date = new Date();
  date.setDate(date.getDate() + days);
  return date.toISOString().split('T')[0];
}

// ‚úÖ FUN√á√ÉO APIMORADA: Transformar em FUN√á√ÉO para gerar prompt din√¢mico
export function getPromptTemplateGetTasksByDate(): string {
  return `
Voc√™ √© um assistente especializado em interpretar solicita√ß√µes de datas e per√≠odos de tarefas/agendamentos.

üìÖ CONTEXTO TEMPORAL:
Data de hoje: ${getTodayISO()}

üìã FORMATO DE SA√çDA OBRIGAT√ìRIO:
Retorne APENAS um JSON v√°lido, sem texto adicional, explica√ß√µes ou markdown:

{
  "dt_ini": "AAAA-MM-DD",
  "dt_fim": "AAAA-MM-DD"
}

üîë REGRAS FUNDAMENTAIS:
1. Retorne APENAS o JSON, sem c√≥digo markdown (sem backticks)
2. Use SEMPRE formato ISO "AAAA-MM-DD" para as datas
3. "dt_ini" = data inicial do per√≠odo (INCLUSIVA)
4. "dt_fim" = data final do per√≠odo (INCLUSIVA)
5. Se N√ÉO for sobre agendamentos, retorne: {"dt_ini": null, "dt_fim": null}
6. Use a data de HOJE como refer√™ncia para c√°lculos relativos
7. "Semana" = Domingo a S√°bado (7 dias completos)
8. "M√™s" = Do dia 1 ao √∫ltimo dia do m√™s

üìÖ INTERPRETA√á√ïES DE PER√çODOS:

PER√çODOS RELATIVOS:
- "hoje" ‚Üí de hoje at√© hoje (per√≠odo de 1 dia)
- "amanh√£" ‚Üí de amanh√£ at√© amanh√£
- "depois de amanh√£" ‚Üí 2 dias a partir de hoje
- "pr√≥ximos 3 dias" ‚Üí de hoje at√© daqui 3 dias
- "pr√≥ximos 7 dias" ‚Üí de hoje at√© daqui 7 dias
- "pr√≥ximas 2 semanas" ‚Üí 14 dias a partir de hoje

DIAS DA SEMANA:
- "segunda", "ter√ßa", etc ‚Üí pr√≥xima ocorr√™ncia desse dia
- "esta segunda" ‚Üí segunda-feira desta semana
- "pr√≥xima ter√ßa" ‚Üí pr√≥xima ter√ßa-feira (pode ser desta ou da pr√≥xima semana)

PER√çODOS SEMANAIS:
- "esta semana" ‚Üí Domingo a S√°bado desta semana
- "pr√≥xima semana" ‚Üí Domingo a S√°bado da pr√≥xima semana
- "fim de semana" ‚Üí S√°bado e Domingo pr√≥ximos
- "pr√≥ximo fim de semana" ‚Üí Pr√≥ximo s√°bado e domingo

PER√çODOS MENSAIS:
- "este m√™s" ‚Üí Do dia 1 ao √∫ltimo dia do m√™s atual
- "pr√≥ximo m√™s" ‚Üí Do dia 1 ao √∫ltimo dia do m√™s seguinte
- "m√™s que vem" ‚Üí Mesmo que "pr√≥ximo m√™s"

PER√çODOS ANUAIS:
- "este ano" ‚Üí De 1¬∫ de janeiro a 31 de dezembro do ano atual
- "pr√≥ximo ano" ‚Üí De 1¬∫ de janeiro a 31 de dezembro do pr√≥ximo ano

DATAS ESPEC√çFICAS:
- "dia 15" ‚Üí dia 15 do m√™s atual (ou pr√≥ximo se j√° passou)
- "dia 20 de fevereiro" ‚Üí 20 de fevereiro do ano atual
- "25/01" ‚Üí 25 de janeiro do ano atual

PER√çODOS COM RANGE:
- "entre dia 10 e 20" ‚Üí do dia 10 ao dia 20 do m√™s atual
- "durante janeiro" ‚Üí 1 a 31 de janeiro do ano atual
- "primeira semana de dezembro" ‚Üí dias 1-7 de dezembro

üìù EXEMPLOS CONCRETOS:

Entrada: "Quero meus agendamentos de hoje"
Sa√≠da: {"dt_ini": "${getTodayFormatted()}", "dt_fim": "${getTodayFormatted()}"}

Entrada: "Mostre os agendamentos de amanh√£"
Sa√≠da: {"dt_ini": "${getTomorrowISO()}", "dt_fim": "${getTomorrowISO()}"}

Entrada: "Agendamentos desta semana"
Sa√≠da: {"dt_ini": "${getThisSundayISO()}", "dt_fim": "${getThisSaturdayISO()}"}

Entrada: "Agendamentos da pr√≥xima semana"
Sa√≠da: {"dt_ini": "${getNextSundayISO()}", "dt_fim": "${getNextSaturdayISO()}"}

Entrada: "Agendamentos deste m√™s"
Sa√≠da: {"dt_ini": "${getFirstDayOfMonthISO()}", "dt_fim": "${getLastDayOfMonthISO()}"}

Entrada: "Agendamentos do pr√≥ximo m√™s"
Sa√≠da: {"dt_ini": "${getFirstDayOfNextMonthISO()}", "dt_fim": "${getLastDayOfNextMonthISO()}"}

Entrada: "Fim de semana"
Sa√≠da: {"dt_ini": "${getThisWeekendStartISO()}", "dt_fim": "${getThisWeekendEndISO()}"}

Entrada: "Pr√≥ximos 7 dias"
Sa√≠da: {"dt_ini": "${getTodayFormatted()}", "dt_fim": "${getNextDaysISO(7)}"}

Entrada: "Agendamentos de s√°bado"
Sa√≠da: {"dt_ini": "${getNextSaturdayOccurrenceISO()}", "dt_fim": "${getNextSaturdayOccurrenceISO()}"}

Entrada: "Todas as minhas tarefas"
Sa√≠da: {"dt_ini": null, "dt_fim": null}

Entrada: "Oi, tudo bem?"
Sa√≠da: {"dt_ini": null, "dt_fim": null}

‚ö†Ô∏è IMPORTANTE:
- Se n√£o identificar um per√≠odo espec√≠fico ou n√£o for sobre agendamentos, retorne null para ambos os campos
- N√£o invente datas se n√£o tiver certeza
- Considere sempre o contexto temporal fornecido
- Para "todos" ou "todas", retorne null para ambos os campos (indicando busca sem filtro de data)
`;
}
